import { ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgbTime } from './ngb-time';
import { NgbTimepickerConfig } from './timepicker-config';
import { NgbTimeAdapter } from './ngb-time-adapter';
/**
 * A directive that helps with wth picking hours, minutes and seconds.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NgbTimepicker implements ControlValueAccessor, OnChanges {
    private readonly _config;
    private _ngbTimeAdapter;
    private _cd;
    disabled: boolean;
    model: NgbTime;
    private _hourStep;
    private _minuteStep;
    private _secondStep;
    /**
     * Whether to display 12H or 24H mode.
     */
    meridian: boolean;
    /**
     * If `true`, the spinners above and below inputs are visible.
     */
    spinners: boolean;
    /**
     * If `true`, it is possible to select seconds.
     */
    seconds: boolean;
    /**
     * The number of hours to add/subtract when clicking hour spinners.
     */
    hourStep: number;
    /**
     * The number of minutes to add/subtract when clicking minute spinners.
     */
    minuteStep: number;
    /**
     * The number of seconds to add/subtract when clicking second spinners.
     */
    secondStep: number;
    /**
     * If `true`, the timepicker is readonly and can't be changed.
     */
    readonlyInputs: boolean;
    /**
     * The size of inputs and buttons.
     */
    size: 'small' | 'medium' | 'large';
    constructor(_config: NgbTimepickerConfig, _ngbTimeAdapter: NgbTimeAdapter<any>, _cd: ChangeDetectorRef);
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    setDisabledState(isDisabled: boolean): void;
    changeHour(step: number): void;
    changeMinute(step: number): void;
    changeSecond(step: number): void;
    updateHour(newVal: string): void;
    updateMinute(newVal: string): void;
    updateSecond(newVal: string): void;
    toggleMeridian(): void;
    formatHour(value: number): string;
    formatMinSec(value: number): string;
    readonly isSmallSize: boolean;
    readonly isLargeSize: boolean;
    ngOnChanges(changes: SimpleChanges): void;
    private propagateModelChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbTimepicker>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgbTimepicker, "ngb-timepicker", never, {
    "meridian": "meridian";
    "spinners": "spinners";
    "seconds": "seconds";
    "hourStep": "hourStep";
    "minuteStep": "minuteStep";
    "secondStep": "secondStep";
    "readonlyInputs": "readonlyInputs";
    "size": "size";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5kLnRzIiwic291cmNlcyI6WyJ0aW1lcGlja2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE5nYlRpbWUgfSBmcm9tICcuL25nYi10aW1lJztcbmltcG9ydCB7IE5nYlRpbWVwaWNrZXJDb25maWcgfSBmcm9tICcuL3RpbWVwaWNrZXItY29uZmlnJztcbmltcG9ydCB7IE5nYlRpbWVBZGFwdGVyIH0gZnJvbSAnLi9uZ2ItdGltZS1hZGFwdGVyJztcbi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBoZWxwcyB3aXRoIHd0aCBwaWNraW5nIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2JUaW1lcGlja2VyIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnO1xuICAgIHByaXZhdGUgX25nYlRpbWVBZGFwdGVyO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIG1vZGVsOiBOZ2JUaW1lO1xuICAgIHByaXZhdGUgX2hvdXJTdGVwO1xuICAgIHByaXZhdGUgX21pbnV0ZVN0ZXA7XG4gICAgcHJpdmF0ZSBfc2Vjb25kU3RlcDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGRpc3BsYXkgMTJIIG9yIDI0SCBtb2RlLlxuICAgICAqL1xuICAgIG1lcmlkaWFuOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHNwaW5uZXJzIGFib3ZlIGFuZCBiZWxvdyBpbnB1dHMgYXJlIHZpc2libGUuXG4gICAgICovXG4gICAgc3Bpbm5lcnM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCBpdCBpcyBwb3NzaWJsZSB0byBzZWxlY3Qgc2Vjb25kcy5cbiAgICAgKi9cbiAgICBzZWNvbmRzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgaG91cnMgdG8gYWRkL3N1YnRyYWN0IHdoZW4gY2xpY2tpbmcgaG91ciBzcGlubmVycy5cbiAgICAgKi9cbiAgICBob3VyU3RlcDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbWludXRlcyB0byBhZGQvc3VidHJhY3Qgd2hlbiBjbGlja2luZyBtaW51dGUgc3Bpbm5lcnMuXG4gICAgICovXG4gICAgbWludXRlU3RlcDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byBhZGQvc3VidHJhY3Qgd2hlbiBjbGlja2luZyBzZWNvbmQgc3Bpbm5lcnMuXG4gICAgICovXG4gICAgc2Vjb25kU3RlcDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHRpbWVwaWNrZXIgaXMgcmVhZG9ubHkgYW5kIGNhbid0IGJlIGNoYW5nZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHlJbnB1dHM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgaW5wdXRzIGFuZCBidXR0b25zLlxuICAgICAqL1xuICAgIHNpemU6ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XG4gICAgY29uc3RydWN0b3IoX2NvbmZpZzogTmdiVGltZXBpY2tlckNvbmZpZywgX25nYlRpbWVBZGFwdGVyOiBOZ2JUaW1lQWRhcHRlcjxhbnk+LCBfY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBvbkNoYW5nZTogKF86IGFueSkgPT4gdm9pZDtcbiAgICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IGFueSkgPT4gYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNoYW5nZUhvdXIoc3RlcDogbnVtYmVyKTogdm9pZDtcbiAgICBjaGFuZ2VNaW51dGUoc3RlcDogbnVtYmVyKTogdm9pZDtcbiAgICBjaGFuZ2VTZWNvbmQoc3RlcDogbnVtYmVyKTogdm9pZDtcbiAgICB1cGRhdGVIb3VyKG5ld1ZhbDogc3RyaW5nKTogdm9pZDtcbiAgICB1cGRhdGVNaW51dGUobmV3VmFsOiBzdHJpbmcpOiB2b2lkO1xuICAgIHVwZGF0ZVNlY29uZChuZXdWYWw6IHN0cmluZyk6IHZvaWQ7XG4gICAgdG9nZ2xlTWVyaWRpYW4oKTogdm9pZDtcbiAgICBmb3JtYXRIb3VyKHZhbHVlOiBudW1iZXIpOiBzdHJpbmc7XG4gICAgZm9ybWF0TWluU2VjKHZhbHVlOiBudW1iZXIpOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaXNTbWFsbFNpemU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNMYXJnZVNpemU6IGJvb2xlYW47XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVNb2RlbENoYW5nZTtcbn1cbiJdfQ==