import { OnDestroy, AfterViewInit, NgZone, OnInit, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TinymceOptions } from './angular2-tinymce-lib.config.interface';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';
import * as ɵngcc0 from '@angular/core';
export declare class TinymceComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {
    private zone;
    private globalOptions;
    optionsOverride: TinymceOptions;
    click: EventEmitter<{}>;
    dblclick: EventEmitter<{}>;
    mousedown: EventEmitter<{}>;
    mouseup: EventEmitter<{}>;
    mousemove: EventEmitter<{}>;
    mouseover: EventEmitter<{}>;
    mouseout: EventEmitter<{}>;
    mouseenter: EventEmitter<{}>;
    mouseleave: EventEmitter<{}>;
    keydown: EventEmitter<{}>;
    keypress: EventEmitter<{}>;
    keyup: EventEmitter<{}>;
    contextmenu: EventEmitter<{}>;
    paste: EventEmitter<{}>;
    init: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    beforeSetContent: EventEmitter<{}>;
    setContent: EventEmitter<{}>;
    getContent: EventEmitter<{}>;
    preProcess: EventEmitter<{}>;
    postProcess: EventEmitter<{}>;
    nodeChange: EventEmitter<{}>;
    undo: EventEmitter<{}>;
    redo: EventEmitter<{}>;
    change: EventEmitter<{}>;
    dirty: EventEmitter<{}>;
    remove: EventEmitter<{}>;
    execCommand: EventEmitter<{}>;
    pastePreProcess: EventEmitter<{}>;
    pastePostProcess: EventEmitter<{}>;
    elementId: string;
    editor: any;
    private onTouchedCallback;
    private onChangeCallback;
    private innerValue;
    private options;
    constructor(zone: NgZone, globalOptions: TinymceOptions);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setupEvents(editor: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TinymceComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TinymceComponent, "app-tinymce", ["tinymce"], {
    "optionsOverride": "options";
}, {
    "click": "click";
    "dblclick": "dblclick";
    "mousedown": "mousedown";
    "mouseup": "mouseup";
    "mousemove": "mousemove";
    "mouseover": "mouseover";
    "mouseout": "mouseout";
    "mouseenter": "mouseenter";
    "mouseleave": "mouseleave";
    "keydown": "keydown";
    "keypress": "keypress";
    "keyup": "keyup";
    "contextmenu": "contextmenu";
    "paste": "paste";
    "init": "init";
    "focus": "focus";
    "blur": "blur";
    "beforeSetContent": "beforeSetContent";
    "setContent": "setContent";
    "getContent": "getContent";
    "preProcess": "preProcess";
    "postProcess": "postProcess";
    "nodeChange": "nodeChange";
    "undo": "undo";
    "redo": "redo";
    "change": "change";
    "dirty": "dirty";
    "remove": "remove";
    "execCommand": "execCommand";
    "pastePreProcess": "pastePreProcess";
    "pastePostProcess": "pastePostProcess";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItdGlueW1jZS1saWIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFuZ3VsYXIyLXRpbnltY2UtbGliLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBOZ1pvbmUsIE9uSW5pdCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFRpbnltY2VPcHRpb25zIH0gZnJvbSAnLi9hbmd1bGFyMi10aW55bWNlLWxpYi5jb25maWcuaW50ZXJmYWNlJztcbmltcG9ydCAndGlueW1jZS90aW55bWNlLm1pbic7XG5pbXBvcnQgJ3RpbnltY2UvdGhlbWVzL21vZGVybi90aGVtZSc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9saW5rL3BsdWdpbi5qcyc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9wYXN0ZS9wbHVnaW4uanMnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvdGFibGUvcGx1Z2luLmpzJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2Fkdmxpc3QvcGx1Z2luLmpzJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2F1dG9yZXNpemUvcGx1Z2luLmpzJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2xpc3RzL3BsdWdpbi5qcyc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9jb2RlL3BsdWdpbi5qcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW55bWNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSBnbG9iYWxPcHRpb25zO1xuICAgIG9wdGlvbnNPdmVycmlkZTogVGlueW1jZU9wdGlvbnM7XG4gICAgY2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgZGJsY2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgbW91c2Vkb3duOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIG1vdXNldXA6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgbW91c2Vtb3ZlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIG1vdXNlb3ZlcjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBtb3VzZW91dDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBtb3VzZWVudGVyOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIG1vdXNlbGVhdmU6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAga2V5ZG93bjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBrZXlwcmVzczogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBrZXl1cDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjb250ZXh0bWVudTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwYXN0ZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBpbml0OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGZvY3VzOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGJsdXI6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgYmVmb3JlU2V0Q29udGVudDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBzZXRDb250ZW50OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGdldENvbnRlbnQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcHJlUHJvY2VzczogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwb3N0UHJvY2VzczogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBub2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHVuZG86IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcmVkbzogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgZGlydHk6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcmVtb3ZlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGV4ZWNDb21tYW5kOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHBhc3RlUHJlUHJvY2VzczogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwYXN0ZVBvc3RQcm9jZXNzOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGVsZW1lbnRJZDogc3RyaW5nO1xuICAgIGVkaXRvcjogYW55O1xuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xuICAgIHByaXZhdGUgaW5uZXJWYWx1ZTtcbiAgICBwcml2YXRlIG9wdGlvbnM7XG4gICAgY29uc3RydWN0b3Ioem9uZTogTmdab25lLCBnbG9iYWxPcHRpb25zOiBUaW55bWNlT3B0aW9ucyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHZhbHVlOiBhbnk7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHNldHVwRXZlbnRzKGVkaXRvcjogYW55KTogdm9pZDtcbn1cbiJdfQ==