/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { FileUploadValidators } from './../helpers/validators.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
import { FileUploadService } from './../services/file-upload.service';
/**
 * A Directive that adds the `filesize` validator to controls marked with the
 * `filesize` attribute. The size of the file is in bytes or any other unit
 *
 * ### Example
 *
 * ```
 * <file-upload name="files" ngModel filesize="830000"></file-upload>
 * <file-upload name="files" ngModel [filesize]="830000"></file-upload>
 * <file-upload name="files" ngModel minSize="0" max="6200"></file-upload>
 * <file-upload name="files" ngModel filesize="123MB"></file-upload>
 * <file-upload name="files" ngModel [filesize]="12 mb"></file-upload>
 * <file-upload name="files" ngModel minSize="0" max="324KB"></file-upload>
 * ```
 *
 */
var FileSizeValidator = /** @class */ (function () {
    function FileSizeValidator(fileUploadService) {
        this.fileUploadService = fileUploadService;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FileSizeValidator.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('filesize' in changes
            || 'maxsize' in changes
            || 'minsize' in changes) {
            this._createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    FileSizeValidator.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FileSizeValidator.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    FileSizeValidator.prototype._createValidator = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxSize = null;
        if (!IsNullOrEmpty(this.maxsize)) {
            maxSize = this.fileUploadService.parseSize(this.maxsize);
        }
        else if (!IsNullOrEmpty(this.filesize)) {
            maxSize = this.fileUploadService.parseSize(this.filesize);
        }
        /** @type {?} */
        var minSize = this.fileUploadService.parseSize(this.minsize);
        this.validator = FileUploadValidators.sizeRange({ maxSize: maxSize, minSize: minSize });
    };
    FileSizeValidator.decorators = [
        { type: Directive, args: [{
                    selector: "file-upload[filesize][formControlName],\n    file-upload[filesize][formControl],\n    file-upload[filesize][ngModel],\n    file-upload[minsize][formControlName],\n    file-upload[minsize][formControl],\n    file-upload[minsize][ngModel],\n    file-upload[maxsize][formControlName],\n    file-upload[maxsize][formControl],\n    file-upload[maxsize][ngModel]",
                    providers: [{
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FileSizeValidator; })),
                            multi: true
                        }],
                    host: {
                        '[attr.filesize]': 'filesize ? filesize : null',
                        '[attr.minsize]': 'minsize ? minsize : null',
                        '[attr.maxsize]': 'maxsize ? maxsize : null'
                    }
                },] }
    ];
    /** @nocollapse */
    FileSizeValidator.ctorParameters = function () { return [
        { type: FileUploadService }
    ]; };
    FileSizeValidator.propDecorators = {
        filesize: [{ type: Input }],
        minsize: [{ type: Input }],
        maxsize: [{ type: Input }]
    };
    return FileSizeValidator;
}());
export { FileSizeValidator };
if (false) {
    /** @type {?} */
    FileSizeValidator.prototype.filesize;
    /** @type {?} */
    FileSizeValidator.prototype.minsize;
    /** @type {?} */
    FileSizeValidator.prototype.maxsize;
    /**
     * @type {?}
     * @private
     */
    FileSizeValidator.prototype.validator;
    /**
     * @type {?}
     * @private
     */
    FileSizeValidator.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    FileSizeValidator.prototype.fileUploadService;
}
/**
 * A Directive that adds the `fileslimit` validator to controls marked with the
 * `fileslimit` attribute.
 *
 * ### Example
 *
 * ```
 * <file-upload name="files" ngModel fileslimit="2"></file-upload>
 * <file-upload name="files" ngModel [fileslimit]="2"></file-upload>
 * ```
 *
 */
var FilesLimitValidator = /** @class */ (function () {
    function FilesLimitValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FilesLimitValidator.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('fileslimit' in changes) {
            this._createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    FilesLimitValidator.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.fileslimit != null ? this.validator(c) : null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FilesLimitValidator.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    FilesLimitValidator.prototype._createValidator = /**
     * @private
     * @return {?}
     */
    function () {
        this.validator = FileUploadValidators.filesLimit(typeof this.fileslimit === 'string' ? parseInt(this.fileslimit, 10) : this.fileslimit);
    };
    FilesLimitValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'file-upload[fileslimit][formControlName], file-upload[fileslimit][formControl], file-upload[fileslimit][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FilesLimitValidator; })),
                            multi: true
                        }],
                    host: { '[attr.fileslimit]': 'fileslimit ? fileslimit : null' }
                },] }
    ];
    FilesLimitValidator.propDecorators = {
        fileslimit: [{ type: Input }]
    };
    return FilesLimitValidator;
}());
export { FilesLimitValidator };
if (false) {
    /** @type {?} */
    FilesLimitValidator.prototype.fileslimit;
    /**
     * @type {?}
     * @private
     */
    FilesLimitValidator.prototype.validator;
    /**
     * @type {?}
     * @private
     */
    FilesLimitValidator.prototype.onChange;
}
/**
 * A Directive that adds the `accept` validator to controls marked with the
 * `accept` attribute.
 *
 * ### Example
 *
 * ```
 * <file-upload name="files" ngModel accept="file_extension|audio/*|video/*|image/*|media_type"></file-upload>
 * <file-upload name="files" ngModel [accept]="file_extension|audio/*|video/*|image/*|media_type"></file-upload>
 * ```
 *
 * To specify more than one value, separate the values with a comma (e.g. <file-upload accept="audio/*,video/*,image/*"></file-upload>.
 *
 */
var FilesAcceptValidator = /** @class */ (function () {
    function FilesAcceptValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FilesAcceptValidator.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('accept' in changes) {
            this._createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    FilesAcceptValidator.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return !!this.validator ? this.validator(c) : null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FilesAcceptValidator.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    FilesAcceptValidator.prototype._createValidator = /**
     * @private
     * @return {?}
     */
    function () {
        if (IsNullOrEmpty(this.accept)) {
            return;
        }
        this.validator = FileUploadValidators.accept(this.accept.split(','));
    };
    FilesAcceptValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'file-upload[accept][formControlName], file-upload[accept][formControl], file-upload[accept][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FilesAcceptValidator; })),
                            multi: true
                        }],
                    host: { '[attr.accept]': 'accept ? accept : null' }
                },] }
    ];
    FilesAcceptValidator.propDecorators = {
        accept: [{ type: Input }]
    };
    return FilesAcceptValidator;
}());
export { FilesAcceptValidator };
if (false) {
    /** @type {?} */
    FilesAcceptValidator.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    FilesAcceptValidator.prototype.validator;
    /**
     * @type {?}
     * @private
     */
    FilesAcceptValidator.prototype.onChange;
}
//# sourceMappingURL=data:application/json;base64,