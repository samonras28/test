/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ElementRef, HostListener, Renderer2, HostBinding, Inject, TemplateRef, ViewChild, ChangeDetectionStrategy, ContentChild, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FileUploadControl } from './../helpers/control.class';
import { FileUploadService } from './../services/file-upload.service';
import { InsertAnimation } from './../animations/insert.animation';
import { ZoomAnimation } from './../animations/zoom.animation';
import { FileUploadAbstract } from './file-upload-abstract.component';
/** @type {?} */
export var DRAGOVER = 'dragover';
/** @type {?} */
export var TOUCHED = 'ng-touched';
var FileUploadComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FileUploadComponent, _super);
    function FileUploadComponent(fileUploadService, hostElementRef, renderer, document, cdr) {
        var _this = _super.call(this, hostElementRef, renderer, cdr) || this;
        _this.fileUploadService = fileUploadService;
        _this.document = document;
        _this.control = null;
        _this.animation = true;
        _this.templateRef = null;
        _this.listItem = null;
        _this.templateContext = {
            $implicit: _this.fileUploadService.isFileDragDropAvailable(),
            isFileDragDropAvailable: _this.fileUploadService.isFileDragDropAvailable()
        };
        /**
         * animation fields
         */
        _this.zoomText = 'static';
        _this.listVisible = false;
        _this.onTouch = (/**
         * @return {?}
         */
        function () {
            _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
        });
        return _this;
    }
    Object.defineProperty(FileUploadComponent.prototype, "multiple", {
        set: /**
         * @param {?} isMultiple
         * @return {?}
         */
        function (isMultiple) {
            this.isMultiple = isMultiple;
            this.checkAndSetMultiple();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "hasFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.isListVisible && this.control.size > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.control.disabled && this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "isAnimationDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.animation === false || ((/** @type {?} */ (this.animation))) === 'false';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    FileUploadComponent.prototype.setEvents = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.setEvents.call(this);
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.document, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.preventDragEvents(event); })));
        }));
        ['dragover', 'dragenter'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onDragOver(event); })));
        }));
        ['dragleave', 'dragend', 'drop'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onDragLeave(event); })));
        }));
        this.subscriptions.push(this.control.valueChanges.subscribe((/**
         * @param {?} files
         * @return {?}
         */
        function (files) { return _this.renderView(); })));
        this.subscriptions.push(this.control.listVisibilityChanges.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        function (status) { return _this.toggleListVisibility(); })));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.control.click();
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.preventDragEvents = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadComponent.prototype.renderView = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.listVisible) {
            this.zoomText = this.control.isListVisible && this.control.size > 0 ? 'zoomOut' : 'static';
        }
        this.cdr.markForCheck();
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadComponent.prototype.showList = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.zoomText !== 'static') {
            this.listVisible = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadComponent.prototype.hideList = /**
     * @private
     * @return {?}
     */
    function () {
        this.listVisible = false;
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadComponent.prototype.toggleListVisibility = /**
     * @private
     * @return {?}
     */
    function () {
        this.listVisible = this.control.isListVisible && this.control.size > 0;
        if (this.listVisible) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
            this.zoomText = 'static';
        }
        this.cdr.markForCheck();
    };
    /**
     * on file over add class name
     */
    /**
     * on file over add class name
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.onDragOver = /**
     * on file over add class name
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * on mouse out remove class name
     */
    /**
     * on mouse out remove class name
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.onDragLeave = /**
     * on mouse out remove class name
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.control.disabled) {
            return;
        }
        /** @type {?} */
        var files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.onInputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var input = (/** @type {?} */ ((event.target)));
        if (!this.control.disabled && input.files.length > 0) {
            this.control.addFiles(input.files);
            this.clearInputEl();
        }
        this.onTouch();
    };
    /**
     * model -> view changes
     */
    /**
     * model -> view changes
     * @param {?} files
     * @return {?}
     */
    FileUploadComponent.prototype.writeValue = /**
     * model -> view changes
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (files != null) {
            this.control.setValue(files);
        }
    };
    /**
     * register function which will be called on UI change
     * to update view -> model
     */
    /**
     * register function which will be called on UI change
     * to update view -> model
     * @param {?} fn
     * @return {?}
     */
    FileUploadComponent.prototype.registerOnChange = /**
     * register function which will be called on UI change
     * to update view -> model
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FileUploadComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    FileUploadComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.control.disable(isDisabled);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.zoomAnimationDone = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.control.isListVisible && this.control.size > 0) {
            this.showList();
        }
        else {
            this.hideList();
        }
        if (event.fromState === 'static' && event.toState === 'zoomOut') {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'hide-text');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'hide-text');
        }
        if (event.toState === 'zoomIn') {
            this.zoomText = 'static';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileUploadComponent.prototype.animationListFinished = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.toState === 'void') {
            this.zoomText = 'zoomIn';
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'list-visible');
        }
        if (event.fromState === 'void') {
            this.zoomText = 'static';
            this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
        }
    };
    FileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: "file-upload:not([simple])",
                    template: "<label #labelRef class=\"upload-input\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\" [@zoomAnimation]=\"zoomText\" (@zoomAnimation.done)=\"zoomAnimationDone($event)\">\r\n\r\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate; context: templateContext\"></ng-container>\r\n\r\n    <ng-template #defaultTemplate let-isFileDragDropAvailable=\"isFileDragDropAvailable\">\r\n        <div class=\"icon\">\r\n            <svg viewBox=\"0 0 96 96\">\r\n                <g>\r\n                    <path d=\"M62.8,68.1c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6s-1.1,0.2-1.5,0.6\r\n                        c-0.4,0.4-0.6,0.9-0.6,1.5c0,0.6,0.2,1.1,0.6,1.5c0.4,0.4,0.9,0.6,1.5,0.6s1.1-0.2,1.5-0.6S62.8,68.7,62.8,68.1z M71.3,68.1\r\n                        c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6c-0.6,0-1.1,0.2-1.5,0.6C67.2,67,67,67.5,67,68.1c0,0.6,0.2,1.1,0.6,1.5\r\n                        s0.9,0.6,1.5,0.6c0.6,0,1.1-0.2,1.5-0.6C71.1,69.2,71.3,68.7,71.3,68.1z M75.5,60.7v10.6c0,0.9-0.3,1.6-0.9,2.2\r\n                        c-0.6,0.6-1.4,0.9-2.2,0.9H23.7c-0.9,0-1.6-0.3-2.2-0.9c-0.6-0.6-0.9-1.4-0.9-2.2V60.7c0-0.9,0.3-1.6,0.9-2.2\r\n                        c0.6-0.6,1.4-0.9,2.2-0.9h14.1c0.5,1.2,1.2,2.2,2.3,3c1.1,0.8,2.3,1.2,3.7,1.2h8.5c1.3,0,2.6-0.4,3.7-1.2c1.1-0.8,1.9-1.8,2.3-3\r\n                        h14.1c0.9,0,1.6,0.3,2.2,0.9C75.2,59.1,75.5,59.8,75.5,60.7z M64.8,39.3c-0.4,0.9-1,1.3-2,1.3h-8.5v14.8c0,0.6-0.2,1.1-0.6,1.5\r\n                        c-0.4,0.4-0.9,0.6-1.5,0.6h-8.5c-0.6,0-1.1-0.2-1.5-0.6c-0.4-0.4-0.6-0.9-0.6-1.5V40.6h-8.5c-0.9,0-1.6-0.4-2-1.3\r\n                        c-0.4-0.9-0.2-1.6,0.5-2.3l14.8-14.8c0.4-0.4,0.9-0.6,1.5-0.6s1.1,0.2,1.5,0.6L64.3,37C65,37.7,65.1,38.4,64.8,39.3z\"/>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    \r\n        <div class=\"upload-text\">\r\n            <ng-container *ngIf=\"isFileDragDropAvailable; else isNotDragDropAvailable\">\r\n                <b>Drag and drop</b> files<br> or click here\r\n            </ng-container>\r\n            <ng-template #isNotDragDropAvailable>\r\n                <b>Click here</b> to<br> choose a files\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <input #inputRef type=\"file\" class=\"files-input\" tabindex=\"-1\" multiple (change)=\"onInputChange($event)\">\r\n</label>\r\n\r\n<div class=\"upload-list\" *ngIf=\"(control.listVisibilityChanges | async) && control.size > 0 && listVisible\" [@insertAnimation]=\"control.size\" (@insertAnimation.done)=\"animationListFinished($event)\">\r\n    <ng-template ngFor let-file let-i=\"index\" [ngForOf]=\"control.valueChanges | async\">\r\n        <ng-container *ngTemplateOutlet=\"listItem ? listItem : defaultItemTemplate; context: { $implicit: file, file: file, index: i, control: control }\"></ng-container>\r\n    </ng-template>\r\n    \r\n    <ng-template #defaultItemTemplate let-i=\"index\" let-file=\"file\" let-control=\"control\">\r\n        <file-upload-list-item  [index]=\"i\" [file]=\"file\" [control]=\"control\"></file-upload-list-item>\r\n    </ng-template>\r\n</div>",
                    providers: [
                        FileUploadService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FileUploadComponent; })),
                            multi: true
                        }
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [
                        ZoomAnimation,
                        InsertAnimation
                    ],
                    styles: ["@charset \"UTF-8\";:host,:host>*{box-sizing:border-box}:host{overflow:hidden;display:block;background:#fafafa;padding:20px 66px 20px 20px;min-height:140px;outline:#92b0b3 dashed 1px;outline-offset:-10px;position:relative}:host(.dragover){outline-width:2px}:host(.disabled){opacity:.5;cursor:no-drop}.files-input{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.icon{height:35px;width:35px;border:1px solid #eaeaea;border-radius:4px;float:left}.icon svg{fill:#909293}.upload-input:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}.upload-input{cursor:pointer;display:inline-block;color:#646464;position:absolute;top:50%;left:50%;margin:0;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);outline:0}:host(.disabled) .upload-input{cursor:not-allowed}:host(.list-visible) .upload-input{top:20px;left:100%;margin-left:-20px;-webkit-transform:translate(-100%,0);-ms-transform:translate(-100%,0);transform:translate(-100%,0);text-align:center}.upload-text{overflow:hidden;width:auto;position:relative;padding-left:20px}:host(.hide-text) .upload-input{opacity:0}:host(.list-visible) .upload-text{display:none}:host(.dragover:not(.disabled)) .upload-input,:host(:not(.disabled)) .upload-input:focus,:host(:not(.disabled)) .upload-input:hover{color:#80a9d2}:host(.dragover:not(.disabled)) .icon svg,:host(:not(.disabled)) .upload-input:focus svg,:host(:not(.disabled)) .upload-input:hover svg{fill:#80a9d2}file-upload-list-item{padding:10px 0 0}file-upload-list-item:first-child{padding:0}"]
                }] }
    ];
    /** @nocollapse */
    FileUploadComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef }
    ]; };
    FileUploadComponent.propDecorators = {
        control: [{ type: Input }],
        animation: [{ type: Input }],
        multiple: [{ type: Input, args: ['multiple',] }],
        templateRef: [{ type: ContentChild, args: ['placeholder', { static: false },] }],
        listItem: [{ type: ContentChild, args: ['item', { static: false },] }],
        input: [{ type: ViewChild, args: ['inputRef', { static: true },] }],
        label: [{ type: ViewChild, args: ['labelRef', { static: true },] }],
        hasFiles: [{ type: HostBinding, args: ['class.has-files',] }],
        isInvalid: [{ type: HostBinding, args: ['class.ng-invalid',] }],
        isAnimationDisabled: [{ type: HostBinding, args: ['@.disabled',] }],
        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
    };
    return FileUploadComponent;
}(FileUploadAbstract));
export { FileUploadComponent };
if (false) {
    /** @type {?} */
    FileUploadComponent.prototype.control;
    /** @type {?} */
    FileUploadComponent.prototype.animation;
    /** @type {?} */
    FileUploadComponent.prototype.templateRef;
    /** @type {?} */
    FileUploadComponent.prototype.listItem;
    /** @type {?} */
    FileUploadComponent.prototype.input;
    /** @type {?} */
    FileUploadComponent.prototype.label;
    /** @type {?} */
    FileUploadComponent.prototype.templateContext;
    /**
     * animation fields
     * @type {?}
     */
    FileUploadComponent.prototype.zoomText;
    /** @type {?} */
    FileUploadComponent.prototype.listVisible;
    /**
     * @type {?}
     * @private
     */
    FileUploadComponent.prototype.onTouch;
    /** @type {?} */
    FileUploadComponent.prototype.fileUploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadComponent.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,