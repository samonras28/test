/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FileUploadControl } from './../helpers/control.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
/**
 * @abstract
 */
export class FileUploadAbstract {
    /**
     * @param {?} hostElementRef
     * @param {?} renderer
     * @param {?} cdr
     */
    constructor(hostElementRef, renderer, cdr) {
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.cdr = cdr;
        this.control = null;
        this.isMultiple = true;
        this.hooks = [];
        this.subscriptions = [];
        this.onChange = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
        this.setEvents();
        this.checkAndMarkAsDisabled();
        this.checkAndSetMultiple();
        this.connectToForm();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.cdr.detach();
        this.hooks.forEach((/**
         * @param {?} hook
         * @return {?}
         */
        (hook) => hook()));
        this.hooks.length = 0;
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
        this.subscriptions.length = 0;
    }
    /**
     * @protected
     * @return {?}
     */
    setEvents() {
        this.subscriptions.push(this.control.statusChanges.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        (status) => this.checkAndMarkAsDisabled())));
        this.subscriptions.push(this.control.eventsChanges.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.triggerEvent(event))));
        this.subscriptions.push(this.control.acceptChanges.subscribe((/**
         * @param {?} accept
         * @return {?}
         */
        (accept) => this.updateAcceptAttr(accept))));
        this.subscriptions.push(this.control.multipleChanges.subscribe((/**
         * @param {?} isMultiple
         * @return {?}
         */
        (isMultiple) => this.toggleMultiple(isMultiple))));
    }
    /**
     * @protected
     * @return {?}
     */
    clearInputEl() {
        this.input.nativeElement.value = null;
    }
    /**
     * @protected
     * @return {?}
     */
    checkAndSetMultiple() {
        if (!this.control) {
            return;
        }
        /** @type {?} */
        const isMultiple = !(this.isMultiple === false || ((/** @type {?} */ (this.isMultiple))) === 'false');
        if (isMultiple !== this.control.isMultiple) {
            this.control.multiple(isMultiple);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    triggerEvent(event) {
        if (typeof this.label.nativeElement[event] === 'function') {
            this.label.nativeElement[event]();
        }
    }
    /**
     * @private
     * @param {?} accept
     * @return {?}
     */
    updateAcceptAttr(accept) {
        if (!IsNullOrEmpty(accept)) {
            this.renderer.setAttribute(this.input.nativeElement, 'accept', accept);
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'accept');
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkAndMarkAsDisabled() {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', true);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', false);
        }
    }
    /**
     * @private
     * @param {?} isMultiple
     * @return {?}
     */
    toggleMultiple(isMultiple) {
        if (isMultiple) {
            this.renderer.setAttribute(this.input.nativeElement, 'multiple', '');
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'multiple');
        }
    }
    /**
     * ControlValueAccessor implementation
     * @private
     * @return {?}
     */
    connectToForm() {
        this.subscriptions.push(this.control.valueChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => this.onChange(v))));
    }
}
if (false) {
    /** @type {?} */
    FileUploadAbstract.prototype.control;
    /** @type {?} */
    FileUploadAbstract.prototype.input;
    /** @type {?} */
    FileUploadAbstract.prototype.label;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.isMultiple;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.hooks;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.hostElementRef;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    FileUploadAbstract.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,