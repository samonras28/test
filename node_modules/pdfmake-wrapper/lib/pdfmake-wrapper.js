var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import pdfMake from 'pdfmake/build/pdfmake';
var PdfMakeWrapper = (function () {
    function PdfMakeWrapper() {
        this.definition = {
            content: []
        };
        this.defaultStyle({});
    }
    PdfMakeWrapper.prototype.add = function (content) {
        this.definition.content.push(content);
    };
    PdfMakeWrapper.prototype.images = function (imgs) {
        var REGEX_BASE64_IMAGE = /^data:image\/(jpeg|png|jpg);base64,/;
        var newImgs = {};
        for (var p in imgs) {
            if (typeof imgs[p] === 'string' && REGEX_BASE64_IMAGE.test(imgs[p])) {
                newImgs[p] = imgs[p];
            }
            else if (typeof imgs[p] !== 'string') {
                newImgs[p] = imgs[p].image;
            }
        }
        this.definition.images = newImgs;
    };
    PdfMakeWrapper.prototype.styles = function (styles) {
        this.definition.styles = styles;
    };
    PdfMakeWrapper.prototype.defaultStyle = function (styles) {
        if (PdfMakeWrapper.usedFont) {
            styles = __assign({}, styles, PdfMakeWrapper.usedFont);
        }
        this.definition.defaultStyle = styles;
    };
    PdfMakeWrapper.prototype.header = function (header) {
        this.definition.header = header;
    };
    PdfMakeWrapper.prototype.footer = function (footer) {
        this.definition.footer = footer;
    };
    PdfMakeWrapper.prototype.background = function (background) {
        this.definition.background = background;
    };
    PdfMakeWrapper.prototype.pageSize = function (size) {
        this.definition.pageSize = size;
    };
    PdfMakeWrapper.prototype.pageMargins = function (margin) {
        this.definition.pageMargins = margin;
    };
    PdfMakeWrapper.prototype.pageOrientation = function (orientation) {
        this.definition.pageOrientation = orientation;
    };
    PdfMakeWrapper.prototype.pageBreakBefore = function (breakBefore) {
        this.definition.pageBreakBefore = breakBefore;
    };
    PdfMakeWrapper.prototype.info = function (info) {
        this.definition.info = info;
    };
    PdfMakeWrapper.prototype.compress = function (compress) {
        this.definition.compress = compress;
    };
    PdfMakeWrapper.prototype.watermark = function (watermark) {
        this.definition.watermark = watermark;
    };
    PdfMakeWrapper.prototype.rawContent = function (content) {
        this.definition.content = content;
    };
    PdfMakeWrapper.prototype.userPassword = function (password) {
        this.definition.userPassword = password;
    };
    PdfMakeWrapper.prototype.permissions = function (password, permissions) {
        this.definition.ownerPassword = password;
        this.definition.permissions = permissions;
    };
    PdfMakeWrapper.setFonts = function (fonts, fontTypesConfig) {
        pdfMake.vfs = fonts.pdfMake.vfs;
        if (fontTypesConfig)
            pdfMake.fonts = fontTypesConfig;
    };
    PdfMakeWrapper.useFont = function (fontName) {
        this.usedFont = { font: fontName };
    };
    PdfMakeWrapper.prototype.create = function () {
        return pdfMake.createPdf(this.definition);
    };
    PdfMakeWrapper.prototype.ln = function (num) {
        if (num === void 0) { num = 1; }
        if (num < 1)
            num = 1;
        return '\n'.repeat(num);
    };
    return PdfMakeWrapper;
}());
export { PdfMakeWrapper };
//# sourceMappingURL=pdfmake-wrapper.js.map