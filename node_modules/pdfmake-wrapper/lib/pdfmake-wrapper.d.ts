import { IInfo, IImg, ICreatePDF, IText, IFontTypes, IFonts, IStyleDefinition, IPermissions, ICustomPageSize, IDocumentNode } from './interfaces';
export declare class PdfMakeWrapper {
    private definition;
    private static usedFont;
    constructor();
    add(content: any): void;
    images(imgs: {
        [propName: string]: IImg | string;
    }): void;
    styles(styles: {
        [propName: string]: IStyleDefinition;
    }): void;
    defaultStyle(styles: IStyleDefinition): void;
    header(header: any): void;
    footer(footer: any): void;
    background(background: any): void;
    pageSize(size: string | ICustomPageSize): void;
    pageMargins(margin: number | [number, number] | [number, number, number, number]): void;
    pageOrientation(orientation: 'landscape' | 'portrait'): void;
    pageBreakBefore(breakBefore: (currentNode: IDocumentNode, followingNodesOnPage?: IDocumentNode[], nodesOnNextPage?: IDocumentNode[], previousNodesOnPage?: IDocumentNode[]) => boolean): void;
    info(info: IInfo): void;
    compress(compress: boolean): void;
    watermark(watermark: string | IText): void;
    rawContent(content: any): void;
    userPassword(password: string): void;
    permissions(password: string, permissions: IPermissions): void;
    static setFonts(fonts: IFonts, fontTypesConfig?: {
        [propName: string]: IFontTypes;
    }): void;
    static useFont(fontName: string): void;
    create(): ICreatePDF;
    ln(num?: number): string;
}
//# sourceMappingURL=pdfmake-wrapper.d.ts.map